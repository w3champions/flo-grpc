syntax = "proto3";
package controller;

import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "player.proto";
import "game.proto";
import "node.proto";

service FloController {
  rpc GetPlayer(GetPlayerRequest) returns (GetPlayerReply) {}
  rpc GetPlayerByToken(GetPlayerByTokenRequest) returns (GetPlayerReply) {}
  rpc GetPlayersBySourceIds(GetPlayersBySourceIdsRequest)
      returns (GetPlayersBySourceIdsReply) {}
  rpc GetPlayerPingMaps(GetPlayerPingMapsRequest)
      returns (GetPlayerPingMapsReply) {}
  rpc UpdateAndGetPlayer(UpdateAndGetPlayerRequest)
      returns (UpdateAndGetPlayerReply) {}
  // Lists all nodes
  rpc ListNodes(google.protobuf.Empty) returns (ListNodesReply) {}
  // Lists games
  rpc ListGames(ListGamesRequest) returns (ListGamesReply) {}
  rpc GetGame(GetGameRequest) returns (GetGameReply) {}
  // Creates a new game
  rpc CreateGame(CreateGameRequest) returns (CreateGameReply) {}
  // Creates a game with node selected and slots configured
  rpc CreateGameAsBot(CreateGameAsBotRequest) returns (CreateGameAsBotReply) {}
  rpc StartGameAsBot(StartGameAsBotRequest) returns (StartGameAsBotReply) {}
  // Joins a game
  rpc JoinGame(JoinGameRequest) returns (JoinGameReply) {}
  // Creates a join token
  rpc CreateJoinGameToken(CreateJoinGameTokenRequest)
      returns (CreateJoinGameTokenReply) {}
  // Join a game by token
  rpc JoinGameByToken(JoinGameByTokenRequest) returns (JoinGameReply) {}
  // Leaves a game
  rpc LeaveGame(LeaveGameRequest) returns (google.protobuf.Empty) {}
  // Select a node that will be used
  rpc SelectGameNode(SelectGameNodeRequest) returns (google.protobuf.Empty) {}
  // Cancels a game
  rpc CancelGame(CancelGameRequest) returns (google.protobuf.Empty) {}
  rpc CancelGameAsBot(CancelGameAsBotRequest) returns (google.protobuf.Empty) {}
  // Imports map checksums
  rpc ImportMapChecksums(ImportMapChecksumsRequest)
      returns (ImportMapChecksumsReply) {}
  rpc SearchMapChecksum(SearchMapChecksumRequest)
      returns (SearchMapChecksumReply) {}
  rpc Reload(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc ListPlayerBans(ListPlayerBansRequest) returns (ListPlayerBansReply) {}
  rpc CreatePlayerBan(CreatePlayerBanRequest) returns (google.protobuf.Empty) {}
  rpc RemovePlayerBan(RemovePlayerBanRequest) returns (google.protobuf.Empty) {}
}

message GetPlayerRequest { int32 player_id = 1; }

message GetPlayerByTokenRequest { string token = 1; }

message GetPlayerReply { player.Player player = 1; }

message GetPlayersBySourceIdsRequest {
  player.PlayerSource source = 1;
  repeated string source_ids = 2;
}

message GetPlayersBySourceIdsReply {
  map<string, player.PlayerRef> player_map = 1;
}

message GetPlayerPingMapsRequest { repeated int32 ids = 1; }

message GetPlayerPingMapsReply { repeated player.PlayerPingMap ping_maps = 1; }

message UpdateAndGetPlayerRequest {
  string name = 1;
  player.PlayerSource source = 2;
  string source_id = 3;
  player.PlayerSourceState source_state = 4;
  google.protobuf.StringValue realm = 5;
}

message UpdateAndGetPlayerReply {
  player.Player player = 1;
  string token = 2;
}

message ListNodesReply { repeated node.Node nodes = 1; }

message ListGamesRequest {
  google.protobuf.StringValue keyword = 1;
  GameStatusFilter status = 2;
  google.protobuf.BoolValue is_private = 3;
  google.protobuf.BoolValue is_live = 4;
  google.protobuf.Int64Value take = 5;
  google.protobuf.Int32Value since_id = 6;
  google.protobuf.Int32Value player_id = 7;
}

enum GameStatusFilter {
  GameStatusFilterAll = 0;
  GameStatusFilterOpen = 1;
  GameStatusFilterLive = 2;
  GameStatusFilterEnded = 3;
}

message ListGamesReply {
  repeated game.GameEntry games = 1;
  bool has_more = 2;
}

message GetGameRequest { int32 game_id = 1; }

message GetGameReply { game.Game game = 1; }

message CreateGameRequest {
  int32 player_id = 1;
  string name = 2;
  game.Wc3Map map = 3;
  bool is_private = 4;
  bool is_live = 5;
}

message CreateGameReply { game.Game game = 1; }

message CreateGameAsBotRequest {
  string name = 2;
  game.Wc3Map map = 3;
  bool is_private = 4;
  bool is_live = 5;
  int32 node_id = 6;
  repeated CreateGameSlot slots = 7;
  bool mask_player_names = 8;
  bool enable_ping_equalizer = 9;
  google.protobuf.Int32Value flo_tv_delay_override_secs = 10;
}

message CreateGameSlot {
  google.protobuf.Int32Value player_id = 1;
  game.SlotSettings settings = 2;
}

message CreateGameAsBotReply { game.Game game = 1; }

message StartGameAsBotRequest { int32 game_id = 1; }

message StartGameAsBotReply {
  bool succeed = 1;
  string error_message = 2;
  map<int32, StartGamePlayerAck> player_ack_map = 3;
}

message StartGameCountdownAsBotRequest { int32 game_id = 1; }

message StartGamePlayerAck {
  string war3_version = 2;
  bytes map_sha1 = 3;
}

message JoinGameRequest {
  int32 game_id = 1;
  int32 player_id = 2;
}

message JoinGameReply { game.Game game = 1; }

message CreateJoinGameTokenRequest {
  int32 game_id = 1;
  int32 player_id = 2;
}

message CreateJoinGameTokenReply { string token = 1; }

message JoinGameByTokenRequest {
  string token = 1;
  int32 player_id = 2;
}

message LeaveGameRequest {
  int32 game_id = 1;
  int32 player_id = 2;
}

message SelectGameNodeRequest {
  int32 game_id = 1;
  int32 player_id = 2;
  google.protobuf.Int32Value node_id = 3;
}

message CancelGameRequest {
  int32 game_id = 1;
  int32 player_id = 2;
}

message CancelGameAsBotRequest { int32 game_id = 1; }

message ImportMapChecksumsRequest {
  repeated game.MapChecksumImportItem items = 1;
}

message ImportMapChecksumsReply { uint32 updated = 1; }

message SearchMapChecksumRequest { string sha1 = 1; }

message SearchMapChecksumReply { google.protobuf.UInt32Value checksum = 1; }

message ListPlayerBansRequest {
  google.protobuf.StringValue query = 1;
  google.protobuf.Int32Value next_id = 2;
}

message ListPlayerBansReply {
  repeated player.PlayerBan player_bans = 1;
  google.protobuf.Int32Value next_id = 2;
}

message CreatePlayerBanRequest {
  int32 player_id = 1;
  player.PlayerBanType ban_type = 3;
  google.protobuf.Timestamp ban_expires_at = 4;
  google.protobuf.StringValue author = 5;
}

message RemovePlayerBanRequest { int32 id = 1; }